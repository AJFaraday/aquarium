Next steps:

Extract 'importer'
Importer runs validation to check whether or not to import
dev_menu replaced with packaged menu


Highlight behaviour
- add change alpha method (see fetcher)
- highlight attribute to URL
- set alpha to 0.7 
- set in menu?


Scoring system:
* Eat a food - 1
* bite a snake - 1
* kill another snake - 1
* 10 seconds alive - 1
* Last snake alive - 1

Exit conditions: (part of game mode?)

* 1 snake left
* Time limit finished (say, 10 minutes)

Menu
- Check box for 'standard mode'
- Match list as table (could include results)

Functions of Strategy class

name
colour
set_target

Callbacks:
new_food
target_removed
tail_bitten(biter)
bite_tail(bitee)
every_tick
idle
starve
eat
eat_target

API
- Proxies to prevent modification
- present tail segment positions

Implement game modes as configs:
Game modes (fixed random seed, fixed board size):
* solo survival
* battle royal (one of each)
* feast mode (battle royale with LOADs of food)
* famine mode (battle royale with famine on)
* swarm mode (10 of each)
* parasite mode (snake vs parasite, of parasite dies, another starts)
* self rivalry (10, 50, 100 of the same. Report highest?, lowest?)

Behaviour validator components
- Answer importer (gets all answers by id)
- Code getter (either answer id or file)
- new Validator(behaviour_class)
- Writer (adds to behaviours/*.js)

in game
Link to menu
When scores are done, table of results 

* Menu as table (can include winner)


Fun idea:
Generate an SVG when running matches (maybe 500 ticks in?)
Preview matches on hovering. 
