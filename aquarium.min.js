!function(f,a,c){var s,l=256,p="random",d=c.pow(l,6),g=c.pow(2,52),y=2*g,h=255;function n(n,t,r){function e(){for(var n=u.g(6),t=d,r=0;n<g;)n=(n+r)*l,t*=l,r=u.g(1);for(;y<=n;)n/=2,t/=2,r>>>=1;return(n+r)/t}var o=[],i=j(function n(t,r){var e,o=[],i=typeof t;if(r&&"object"==i)for(e in t)try{o.push(n(t[e],r-1))}catch(n){}return o.length?o:"string"==i?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[n,S(a)]:null==n?function(){try{var n;return s&&(n=s.randomBytes)?n=n(l):(n=new Uint8Array(l),(f.crypto||f.msCrypto).getRandomValues(n)),S(n)}catch(n){var t=f.navigator,r=t&&t.plugins;return[+new Date,f,r,f.screen,S(a)]}}():n,3),o),u=new m(o);return e.int32=function(){return 0|u.g(4)},e.quick=function(){return u.g(4)/4294967296},e.double=e,j(S(u.S),a),(t.pass||r||function(n,t,r,e){return e&&(e.S&&v(e,u),n.state=function(){return v(u,{})}),r?(c[p]=n,t):n})(e,i,"global"in t?t.global:this==c,t.state)}function m(n){var t,r=n.length,u=this,e=0,o=u.i=u.j=0,i=u.S=[];for(r||(n=[r++]);e<l;)i[e]=e++;for(e=0;e<l;e++)i[e]=i[o=h&o+n[e%r]+(t=i[e])],i[o]=t;(u.g=function(n){for(var t,r=0,e=u.i,o=u.j,i=u.S;n--;)t=i[e=h&e+1],r=r*l+i[h&(i[e]=i[o=h&o+t])+(i[o]=t)];return u.i=e,u.j=o,r})(l)}function v(n,t){return t.i=n.i,t.j=n.j,t.S=n.S.slice(),t}function j(n,t){for(var r,e=n+"",o=0;o<e.length;)t[h&o]=h&(r^=19*t[h&o])+e.charCodeAt(o++);return S(t)}function S(n){return String.fromCharCode.apply(0,n)}if(j(c.random(),a),"object"==typeof module&&module.exports){module.exports=n;try{s=require("crypto")}catch(n){}}else"function"==typeof define&&define.amd?define((function(){return n})):c["seed"+p]=n}("undefined"!=typeof self?self:this,[],Math);class Menu{constructor(){this.list=document.querySelector("ul#menu"),this.form=document.querySelector("div#form"),this.sections=[],this.populate(),this.build_form()}populate(){this.build_all_snake_items(this),this.build_solo_items(this),this.build_versus_items(this)}build_form(){var menu=this,label=document.createElement("label");label.innerHTML="Select Snake",this.form.appendChild(label);var select=document.createElement("select");select.addEventListener("change",(function(e){menu.show_snake(this.selectedOptions[0].value)}));var option=document.createElement("option");option.innerHTML="All",option.value="all",select.appendChild(option),Object.keys(Behaviours).forEach((function(behaviour){var option=document.createElement("option");option.innerHTML=new Behaviours[behaviour](0).name(),option.value=behaviour,select.appendChild(option),menu.form.appendChild(select)})),this.form.appendChild(select)}build_versus_items(menu){Menu.versus_configs().forEach((function(config_name){Config.build_config_for_all_pairs(Configs[config_name]).forEach((function(config){menu.append_to_section("Versus",config)}))}))}build_solo_items(menu){Menu.solo_configs().forEach((function(config_name){Config.build_config_for_all(Configs[config_name]).forEach((function(config){menu.append_to_section("Solo",config)}))}))}build_all_snake_items(menu){Menu.all_snake_configs().forEach((function(config_name){var config=Config.build_config(Configs[config_name]);menu.append_to_section("All Snakes",config)}))}build_section(name){var title=document.createElement("li");title.innerHTML=name,this.sections[name]=document.createElement("ul"),this.list.append(title),this.list.append(this.sections[name])}append_to_section(section,config){void 0===this.sections[section]&&this.build_section(section);var label=config.name,list_item=document.createElement("li"),link=document.createElement("a");link.innerHTML=label,link.setAttribute("href",this.url_from_config(config)),link.setAttribute("target","_blank"),link.setAttribute("data-behaviour","match_link"),link.setAttribute("data-snakes",config.starting_behaviours.map((function(x){return x.name}))),list_item.append(link),this.sections[section].append(list_item)}url_from_config(config){switch(config.type){case"solo":return"config.html?config="+config.id+"&snake="+config.starting_behaviours[0].name;case"versus":return"config.html?config="+config.id+"&snake="+config.starting_behaviours[0].name+"&opponent="+config.starting_behaviours[1].name;case"all":return"config.html?config="+config.id}}show_all(){document.querySelectorAll("a[data-behaviour=match_link]").forEach((function(link){link.parentElement.style.display="block"}))}hide_all(){document.querySelectorAll("a[data-behaviour=match_link]").forEach((function(link){link.parentElement.style.display="none"}))}with_snake(name){return document.querySelectorAll('[data-snakes*="'+name+'"]')}show_snake(name){menu.hide_all(),this.with_snake(name).length>0?this.with_snake(name).forEach((function(link){link.parentElement.style.display="block"})):this.show_all()}static solo_configs(){return["grid","swarm"]}static all_snake_configs(){return["royale","big"]}static versus_configs(){return["versus"]}}class Game{static init(config){switch(this.config=config,console.log("Running Config: "+config.name),this.cli_mode="undefined"==typeof document,this.cli_mode?(this.width=1024,this.height=768):(this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas=new Canvas,this.canvas.canvas.width=this.width,this.canvas.canvas.height=this.height),this.tick=0,Game.drawables=[],Game.updatables=[],Game.last_food_tick=0,Game.food=[],Game.snakes=[],this.drawables.push(new Static.Text(this.config.name,20,40,30,"left")),Game.config.starting_food_mode){case"rng":Game.add_random_foods(Game.config.starting_food);break;case"grid":Game.add_food_grid(Game.config.grid_size)}this.snake_registry={};var starting_snakes_left=Game.config.min_starting_snakes;Game.config.starting_behaviours.forEach((function(behaviour){[...Array(Game.config.snakes_of_each_behaviour)].forEach((function(_){Game.add_snake(behaviour),starting_snakes_left--}))})),starting_snakes_left>0&&[...Array(starting_snakes_left)].forEach((function(_){Game.add_random_snake()})),this.cli_mode||(Game.draw_loop=setInterval((function(){requestAnimationFrame(Game.draw)}),10),Game.update_loop=setInterval(Game.update,10))}static update(){Game.updatables.forEach((function(updatable){updatable.update()})),Game.add_food(),Game.tick++,Game.snakes.length<Game.config.min_snakes&&Game.add_random_snake(),0==Game.snakes.length?Game.end():Game.snakes.forEach((function(snake){snake.behaviour.every_tick()}))}static draw(){Game.canvas.clear(),Game.drawables.forEach((function(drawable){drawable.draw()}))}static add_random_snake(){var behaviour=Game.config.respawn_behaviours[Math.floor(Math.random()*Game.config.respawn_behaviours.length)];Game.add_snake(behaviour)}static add_random_foods(n){[...Array(n)].forEach((function(_){new Static.Food}))}static add_food_grid(size){for(var grid_width=Math.floor(Game.width/size),grid_height=Math.floor(Game.height/size),row=0,col=0;row<=grid_height;){for(col=0;col<=grid_width;){var food=new Static.Food;food.x=col*size,food.y=row*size,col++}row++}}static add_food(){Game.tick-Game.last_food_tick>=Game.config.food_interval&&(Game.last_food_tick=Game.tick,new Static.Food)}static add_snake(behaviour){return new Creatures.Snake(behaviour)}static end(){clearInterval(Game.draw_loop),clearInterval(Game.update_loop)}static register_snake(name){return void 0===Game.snake_registry[name]&&(Game.snake_registry[name]=0),Game.snake_registry[name]++,name+"["+Game.snake_registry[name]+"]"}}class Canvas{constructor(){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.to_radians=Math.PI/180}draw_circle(source){this.ctx.lineWidth=5,this.ctx.fillStyle=source.colour,this.ctx.beginPath(),this.ctx.arc(source.x,source.y,source.size,0,360),this.ctx.fill()}draw_square(source){this.ctx.lineWidth=5,this.ctx.strokeStyle=source.colour,this.ctx.strokeRect(source.x-source.size/2,source.y-source.size/2,source.size,source.size)}draw_text(text,x,y,colour,align,size){this.ctx.font=size+"px Arial",this.ctx.textAlign=align,this.ctx.fillStyle=colour,this.ctx.fillText(text,x,y)}draw_line(thing_one,thing_two,colour,thickness){this.ctx.lineWidth=thickness,this.ctx.strokeStyle=colour,this.ctx.beginPath(),this.ctx.moveTo(thing_one.x,thing_one.y),this.ctx.lineTo(thing_two.x,thing_two.y),this.ctx.stroke()}clear(){this.ctx.clearRect(0,0,Game.width,Game.height)}}class Utils{static angleDifference(angle1,angle2){var diff=(angle2-angle1+180)%360-180;return diff<-180?diff+360:diff}static outOfRange(thing){return thing.x<-200||thing.x>Game.width+200||thing.y<-200||thing.y>Game.height+200}static angleBetweenPoints(thing_one,thing_two){return 180*Math.atan2(thing_one.y-thing_two.y,thing_one.x-thing_two.x)/Math.PI+180}static distanceBetweenPoints(thing_one,thing_two){var a=thing_one.x-thing_two.x,b=thing_one.y-thing_two.y;return Math.sqrt(a*a+b*b)}static touching(thing_one,thing_two){return Utils.distanceBetweenPoints(thing_one,thing_two)<=thing_one.size+thing_two.size}static median(array){var mid=Math.floor(array.length/2);return[...array].sort((a,b)=>a-b)[mid]}static url_vars(){if("undefined"!=typeof window){var vars={};window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(m,key,value){vars[key]=value}));return vars}}static pairs_for(n_options){for(var n1=0,n2=0,pairs=[];n1<n_options;){for(n2=n1;n2<n_options;)pairs.push([n1,n2]),n2++;n1++}return pairs}}function mix(...mixins){class Mix{}for(let mixin of mixins)copyProperties(Mix,mixin),copyProperties(Mix.prototype,mixin.prototype);return Mix}function copyProperties(target,source){for(let key of Reflect.ownKeys(source))if("constructor"!==key&&"prototype"!==key&&"name"!==key){let desc=Object.getOwnPropertyDescriptor(source,key);Object.defineProperty(target,key,desc)}}class Behaviour{constructor(snake){this.snake=snake}set_target(){}new_food(){}target_removed(){}bite_tail(victim){}tail_bitten(bitten_by){}eat(){}eat_target(){}starve(){}every_tick(){}idle(){void 0===this.idle_target_tick&&(this.idle_target_tick=0),void 0===this.idle_inteval&&(this.idle_interval=400*Math.random()+100),this.tick()-this.idle_target_tick>this.idle_interval&&(this.idle_target_tick=Game.tick,this.snake.target={x:Math.random()*Game.width,y:Math.random()*Game.height})}x(){return this.snake.x}y(){return this.snake.y}food(){return Game.food}snakes(){return Game.snakes}tick(){return Game.tick}length(){return this.snakes.tail_segments.length}last_ate_tick(){return this.snake.last_ate_tick()}utils(){return Utils}game_width(){return Game.width}game_height(){return Game.height}angle(){return this.snake.get_angle()}target(object){if(void 0===object||"number"!=typeof object.x||"number"!=typeof object.y)throw console.log(this.snake.name+": Invalid target object"),console.log(object),this.snake.name+": Invalid target object";this.snake.target=object}}"undefined"==typeof Concerns&&(Concerns={}),Concerns.Catchable=class{constructor(){}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.snakes.splice(Game.snakes.indexOf(this),1)}caught_by(){var catchable=this;return Game.snakes.find((function(snake){return Utils.touching(catchable,snake)}))}caught(){var catchable=this,result=!1;return Game.snakes.forEach((function(snake){Utils.touching(catchable,snake)&&(result=!0)})),result}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Eater=class{see_new_food(){this.behaviour.new_food()}set_target(){Game.food.length>0?this.behaviour.set_target():this.behaviour.idle()}eat(food){this.last_ate_tick=Game.tick,this.health+=1,this.speed+=.1,this.grow_tail(),this.behaviour.eat(),food==this.target&&this.behaviour.eat_target()}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Follower=class{constructor(){}move(){this.get_angle(),this.x=Math.cos(this.angle*Math.PI/180)*(this.get_speed()/7)+this.x,this.y=Math.sin(this.angle*Math.PI/180)*(this.get_speed()/7)+this.y,this.history.push({x:this.x,y:this.y}),this.history.length>=25&&this.history.shift(),this.remove&&Utils.outOfRange(this)&&(console.log(Game.tick+": "+this.name+" removed because it is out of bounds"),this.remove())}get_angle(){var angle_difference=Utils.angleDifference(this.angle_to_target(),this.angle);return this.angle-=angle_difference/(200/(this.turn_speed/5)),this.angle}angle_to_target(){return Utils.angleBetweenPoints(this,this.target)}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.TailBiter=class{constructor(){}bite_tail(){var me=this;Game.snakes.forEach((function(snake){snake.tail_segments&&snake.tail_segments.forEach((function(segment){Utils.touching(me,segment)&&segment.active&&(me.bite(snake),segment.get_bitten(),snake.get_bitten_by(me))}))}))}},"undefined"==typeof Static&&(Static={}),Static.Food=class extends Concerns.Catchable{constructor(){super(),this.x=Math.floor(Math.random()*Game.width),this.y=Math.floor(Math.random()*Game.height),this.size=6,this.colour="rgba(0, 256, 256, 0.8)",Game.drawables.push(this),Game.updatables.push(this),Game.food.push(this),Game.snakes.forEach((function(snake){snake.see_new_food()}))}draw(){Game.canvas.draw_square(this)}update(){this.caught()&&(this.remove(),this.caught_by().eat(this))}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.food.splice(Game.food.indexOf(this),1),1==Game.config.famine&&(Game.config.food_interval+=10)}},"undefined"==typeof Static&&(Static={}),Static.Ghost=class{constructor(src){this.x=src.x,this.y=src.y,this.size=src.size,this.colour=src.colour.replace(/0\.[0-9]/,"0.1"),Game.drawables.push(this)}draw(){Game.canvas.draw_circle(this)}},"undefined"==typeof Static&&(Static={}),Static.Text=class{constructor(text,x,y,size,align){this.text=text,this.size=size,this.x=x,this.y=y,this.align=align}draw(){Game.canvas.draw_text(this.text,this.x,this.y,"rgba(0,0,0,0.3)",this.align,this.size)}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Snake=class extends(mix(Concerns.Follower,Concerns.TailBiter,Concerns.Eater)){constructor(behaviour){super(),this.behaviour=new behaviour(this),this.colour=this.behaviour.colour(),this.name=Game.register_snake(this.behaviour.name()),this.x=Math.random()*Game.width,this.y=Math.random()*Game.height,this.target={x:0,y:0},this.angle=this.angle_to_target(),this.turn_speed=40,this.size=40,this.speed=20,this.angle=0,this.tail_segments=[],this.health=20,this.last_ate_tick=Game.tick,this.behaviour.set_target(),this.history=this.init_history(),this.grow_tail(),this.grow_tail(),Game.updatables.push(this),Game.drawables.push(this),Game.snakes.push(this)}init_history(){return[{x:60*Math.sin(this.angle*Math.PI/180)+this.x,y:60*Math.cos(this.angle*Math.PI/180)+this.y}]}update(){for(var segment in this.move(),this.bite_tail(),this.tail_segments)this.tail_segments[segment].move();0==Game.food.length?this.behaviour.idle():Game.food.includes(this.target)||Game.snakes.includes(this.target)||this.behaviour.target_removed(),this.check_for_starvation()}draw(){Game.canvas.draw_circle(this),this.tail_segments.forEach((function(segment){segment.draw()}))}get_speed(){return this.speed}get_bitten_by(biter){this.speed=20,this.health<=0&&(console.log(Game.tick+": "+this.name+" died because it's tail was bitten by "+biter.name),this.remove())}bite(snake){this.last_ate_tick=Game.tick,this.speed+=snake.speed/10,this.behaviour.bite_tail(snake),snake.behaviour.tail_bitten(this)}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.snakes.splice(Game.snakes.indexOf(this),1),new Static.Ghost(this),this.tail_segments.forEach((function(segment){new Static.Ghost(segment)}))}grow_tail(){var target=this.tail_segments[this.tail_segments.length-1];null==target&&(target=this),this.tail_segments.push(new Creatures.TailSegment(target,this))}check_for_starvation(){Game.tick-this.last_ate_tick>Game.config.starvation_interval&&(0==this.tail_segments.length?(console.log(Game.tick+": "+this.name+" died of starvation"),this.remove()):(this.last_ate_tick=Game.tick,this.tail_segments.pop(),this.behaviour.starve()))}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.TailSegment=class extends(mix(Concerns.Follower)){constructor(previous,head){super(),this.head=head,previous.history[0]?(this.x=previous.history[0].x,this.y=previous.history[0].y):(this.x=previous.x,this.y=previous.y),this.size=30,this.speed=previous.speed,this.colour=head.colour,this.turn_speed=100,this.angle=previous.angle,this.target=previous,this.history=[],this.active=head.tail_segments.length>1}draw(){Game.canvas.draw_circle(this)}get_speed(){return this.head.speed}get_bitten(){this.head.health-=2*(this.head.tail_segments.length-this.head.tail_segments.indexOf(this)),this.head.tail_segments.splice(this.head.tail_segments.indexOf(this),this.head.tail_segments.length-1)}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.Failure=class extends Behaviour{constructor(snake){super(snake),this.spot={x:Math.random()*this.game_width(),y:Math.random()*this.game_height()}}name(){return"fail"}colour(){return"rgba(0,255,255,0.4)"}set_target(){this.target(this.spot)}idle(){this.target(this.spot)}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.Farthest=class extends Behaviour{constructor(snake){super(snake)}name(){return"Farthest Food"}colour(){return"rgba(0,255,0,0.4)"}set_target(){var behaviour=this;if(0==this.food().length)this.idle();else{var distances=this.food().map((function(food){return behaviour.utils().distanceBetweenPoints(behaviour.snake,food)})),max_distance=Math.max(...distances);this.target(this.food()[distances.indexOf(max_distance)])}}target_removed(){this.set_target()}eat_target(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.HighRotation=class extends Behaviour{constructor(snake){super(snake)}name(){return"High Rotation"}colour(){return"rgba(128,0,128,0.4)"}set_target(){var behaviour=this;if(0==this.food().length)this.idle();else{var angles=this.food().map((function(food){var angle=behaviour.utils().angleBetweenPoints(food,behaviour.snake);return Math.abs(behaviour.utils().angleDifference(angle,behaviour.angle()))})),max_angle=Math.min(...angles);this.target(behaviour.food()[angles.indexOf(max_angle)])}}target_removed(){this.set_target()}eat(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.LowRotation=class extends Behaviour{constructor(snake){super(snake)}name(){return"Low Rotation"}colour(){return"rgba(128,128,128,0.4)"}set_target(){var behaviour=this;if(0==this.food().length)this.idle();else{var angles=this.food().map((function(food){var angle=behaviour.utils().angleBetweenPoints(food,behaviour.snake);return Math.abs(behaviour.utils().angleDifference(angle,behaviour.angle()))})),min_angle=Math.max(...angles);this.target(behaviour.food()[angles.indexOf(min_angle)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.Nearest=class extends Behaviour{constructor(snake){super(snake)}name(){return"Nearest Food"}colour(){return"rgba(255,0,0,0.4)"}set_target(){var behaviour=this;if(0==this.food().length)this.idle();else{var distances=this.food().map((function(food){return behaviour.utils().distanceBetweenPoints(behaviour.snake,food)})),min_distance=Math.min(...distances);this.target(this.food()[distances.indexOf(min_distance)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.Parasite=class extends Behaviour{constructor(snake){super(snake)}name(){return"Parasite"}colour(){return"rgba(0,0,0,0.4)"}set_target(){if(0==this.snakes().length)this.idle();else{var parasite=this.snake,distances=this.snakes().map((function(snake){if(snake==parasite)return 99999;var length=snake.tail_segments.length;return Utils.distanceBetweenPoints(parasite,snake)-1e3*length})),min_distance=Math.min(...distances),target=this.snakes()[distances.indexOf(min_distance)];target==this.snake?this.target={x:this.game_width()/2,y:this.game_height()/2}:this.target(target)}}every_tick(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.Random=class extends Behaviour{constructor(snake){super(snake)}name(){return"Random Food"}colour(){return"rgba(0,0,255,0.4)"}set_target(){0==this.food().length?this.idle():this.target(this.food()[Math.floor(Math.random()*this.food().length)])}target_removed(){this.set_target()}eat(){this.set_target()}},"undefined"==typeof Behaviours&&(Behaviours={}),Behaviours.TopHugger=class extends Behaviour{constructor(snake){super(snake)}name(){return"Top Hugger"}colour(){return"rgba(255,128,0,0.4)"}set_target(){if(0==this.food().length)this.idle();else{var heights=this.food().map((function(food){return food.y})),min_height=Math.min(...heights);this.target(this.food()[heights.indexOf(min_height)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}},Config={index:0,opponent_index:0,all_behaviours:function(){return Object.values(Behaviours)},single_behaviour:function(index){return[Object.values(Behaviours)[index]]},current_behaviour:function(){return Config.single_behaviour(Config.index)},current_opponent:function(){return Config.single_behaviour(Config.opponent_index)},current_pair:function(){return Config.current_behaviour().concat(Config.current_opponent())},next_behaviour:function(){var current=Config.current_behaviour();return Config.index++,current},next_opponent:function(){var current=Config.current_opponent();return Config.opponent_index++,current},finished:function(){return Config.index>=Object.keys(Behaviours).length},reset_indexes:function(){Config.index=0,Config.opponent_index=0},build_config:function(config){var new_config={};return Object.keys(config).forEach((function(key){"function"==typeof config[key]?new_config[key]=config[key]():new_config[key]=config[key]})),new_config},build_config_for_all:function(config){for(Config.reset_indexes(),configs=[];!Config.finished();)configs.push(Config.build_config(config)),Config.next_behaviour();return configs},build_config_for_all_pairs:function(config){for(Config.reset_indexes(),configs=[];!Config.finished();){for(Config.opponent_index=Config.index;Config.opponent_index<Object.keys(Behaviours).length;)configs.push(Config.build_config(config)),Config.next_opponent();Config.next_behaviour()}return configs},from_url:function(){if("undefined"!=typeof window){var url=window.location.href,attrs={};if(url.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(m,key,value){attrs[key]=value})),attrs.snake&&(Config.index=Object.keys(Behaviours).indexOf(attrs.snake),-1==Config.index))throw"Unknown snake: "+attrs.snake;if(attrs.opponent&&(Config.opponent_index=Object.keys(Behaviours).indexOf(attrs.opponent),-1==Config.index))throw"Unknown snake: "+attrs.snake;var config=Configs[attrs.config];if(void 0===config)throw"Unknown config: "+attrs.config;return Config.build_config(config)}}},"undefined"==typeof Configs&&(Configs={}),Configs.big={id:"big",type:"all",name:"Big Swarm Mode - All snakes",min_snakes:0,starting_food_mode:"rng",starting_food:200,grid_size:100,food_interval:5,famine:!1,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:10,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500},"undefined"==typeof Configs&&(Configs={}),Configs.grid={id:"grid",type:"solo",name:function(){return"Solo on grid: "+(new(Config.current_behaviour()[0])).name()},min_snakes:0,starting_food_mode:"grid",starting_food:20,grid_size:100,food_interval:5e7,famine:!1,starting_behaviours:Config.current_behaviour,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_behaviour,min_starting_snakes:0,starvation_interval:500},"undefined"==typeof Configs&&(Configs={}),Configs.royale={id:"royale",type:"all",name:"Battle Royale - All snakes",min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:!1,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:1,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500},"undefined"==typeof Configs&&(Configs={}),Configs.swarm={id:"swarm",type:"solo",name:function(){return"Swarm mode: 20 x "+(new(Config.current_behaviour()[0])).name()},min_snakes:0,starting_food_mode:"rng",starting_food:200,grid_size:100,food_interval:5,famine:!1,starting_behaviours:Config.current_behaviour,snakes_of_each_behaviour:20,respawn_behaviours:Config.current_behaviour,min_starting_snakes:0,starvation_interval:500},"undefined"==typeof Configs&&(Configs={}),Configs.versus={id:"versus",type:"versus",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]),dummy_opponent=new(Config.current_opponent()[0]);return"Duel: "+dummy_behaviour.name()+"  Vs. "+dummy_opponent.name()},min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:!1,starting_behaviours:Config.current_pair,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_pair,min_starting_snakes:0,starvation_interval:500};