Config={min_snakes:5,starting_food:20,food_interval:100,starting_snakes:[{colour:"rgb(255,0,0,0.4)",strategy:"nearest",count:2},{colour:"rgb(0,255,0,0.4)",strategy:"farthest",count:2},{colour:"rgb(0,0,255,0.4)",strategy:"random",count:2},{colour:"rgb(128,128,128,0.4)",strategy:"low_turning",count:2},{colour:"rgb(128,0,128,0.4)",strategy:"high_turning",count:2},{colour:"rgb(255,128,0,0.4)",strategy:"top_hugger",count:2},{colour:"rgb(0,0,0,0.4)",strategy:"parasite",count:2}],min_starting_snakes:20,starvation_interval:500};class Game{static init(){this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas=new Canvas,this.canvas.canvas.width=this.width,this.canvas.canvas.height=this.height,this.tick=0,Game.drawables=[],Game.updatables=[],Game.food=[],Game.creatures=[],[...Array(Config.starting_food)].forEach((function(t){Game.add_food()}));var t=Config.min_starting_snakes;Config.starting_snakes.forEach((function(e){[...Array(e.count)].forEach((function(a){Game.add_creature("Snake",e.colour,e.strategy),t--}))})),t>0&&[...Array(t)].forEach((function(t){Game.add_random_creature()})),Game.draw_loop=setInterval((function(){requestAnimationFrame(Game.draw)}),10),Game.update_loop=setInterval(Game.update,10)}static update(){Game.updatables.forEach((function(t){t.update()})),Game.add_food(),Game.tick++,Game.creatures.length<Config.min_snakes&&Game.add_random_creature()}static draw(){Game.canvas.clear(),Game.drawables.forEach((function(t){t.draw()}))}static add_random_creature(){var t=Config.starting_snakes[Math.floor(Math.random()*Config.starting_snakes.length)];Game.add_creature("Snake",t.colour,t.strategy)}static add_food(){Game.tick%Config.food_interval==0&&new Static.Food}static add_poison(){if(1==Game.goals.length)for(var t=Math.floor(Player.score.value/10);t>0;t--)new Static.Poison}static add_creature(t,e,a){var s=new Creatures[t];return s.colour=e,s.set_strategy(a),s}static do_script_actions(){Script.Actions.run_without_type(Player.score.value)}static end(){clearInterval(Game.draw_loop),clearInterval(Game.update_loop)}}class Canvas{constructor(){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.arrow_image=new Image(100,100),this.arrow_image.src="img/arrow.png",this.to_radians=Math.PI/180}draw_circle(t){this.ctx.lineWidth=5,this.ctx.fillStyle=t.colour,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.size,0,360),this.ctx.fill()}draw_square(t){this.ctx.lineWidth=5,this.ctx.strokeStyle=t.colour,this.ctx.strokeRect(t.x-t.size/2,t.y-t.size/2,t.size,t.size)}draw_text(t,e,a,s,i,r){this.ctx.font=r+"px Arial",this.ctx.textAlign=i,this.ctx.fillStyle=s,this.ctx.fillText(t,e,a)}draw_triangle(t){var e=t.size/2,a=(t.angle+90)%360*this.to_radians;this.ctx.translate(t.x,t.y),this.ctx.rotate(a),this.ctx.drawImage(this.arrow_image,-e,-e,t.size,t.size),this.ctx.rotate(-a),this.ctx.translate(-1*t.x,-1*t.y)}draw_line(t,e,a,s){this.ctx.lineWidth=s,this.ctx.strokeStyle=a,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke()}clear(){this.ctx.clearRect(0,0,Game.width,Game.height)}}class Utils{static angleDifference(t,e){var a=(e-t+180)%360-180;return a<-180?a+360:a}static outOfRange(t){return t.x<-200||t.x>Game.width+200||t.y<-200||t.y>Game.height+200}static angleBetweenPoints(t,e){return 180*Math.atan2(t.y-e.y,t.x-e.x)/Math.PI+180}static distanceBetweenPoints(t,e){var a=t.x-e.x,s=t.y-e.y;return Math.sqrt(a*a+s*s)}static touching(t,e){return Utils.distanceBetweenPoints(t,e)<=t.size+e.size}static median(t){var e=Math.floor(t.length/2);return[...t].sort((t,e)=>t-e)[e]}}function mix(...t){class e{}for(let a of t)copyProperties(e,a),copyProperties(e.prototype,a.prototype);return e}function copyProperties(t,e){for(let a of Reflect.ownKeys(e))if("constructor"!==a&&"prototype"!==a&&"name"!==a){let s=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,s)}}Strategies={nearest:{see_new:"retarget",target_type:"nearest_food"},farthest:{see_new:"nothing",target_type:"farthest_food"},random:{see_new:"nothing",target_type:"random_food"},low_turning:{see_new:"retarget",target_type:"least_rotation"},high_turning:{see_new:"nothing",target_type:"most_rotation"},top_hugger:{see_new:"retarget",target_type:"highest_food"},parasite:{see_new:"nothing",target_type:"nearest_snake"}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Catchable=class{constructor(){}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.creatures.splice(Game.creatures.indexOf(this),1)}caught_by(){var t=this;return Game.creatures.find((function(e){return Utils.touching(t,e)}))}caught(){var t=this,e=!1;return Game.creatures.forEach((function(a){Utils.touching(t,a)&&(e=!0)})),e}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Eater=class{see_new_food(){"retarget"==this.strategy.see_new&&this.set_target()}set_target(){Game.food.length>0?(this.idling=!1,void 0===this.strategy?this.target=this.random_food():this.target=this[this.strategy.target_type]()):this.idle()}idle(){void 0===this.idle_target_tick&&(this.idle_target_tick=Game.tick),void 0===this.idle_inteval&&(this.idle_interval=400*Math.random()+100),Game.tick-this.idle_target_tick>100&&(this.idle_target_tick=Game.tick,this.target={x:Math.random()*Game.width,y:Math.random()*Game.height})}nearest_food(){var t=this,e=Game.food.map((function(e){return Utils.distanceBetweenPoints(t,e)})),a=Math.min(...e);return Game.food[e.indexOf(a)]}nearest_snake(){var t=this,e=Game.creatures.map((function(e){return e==t?99999:Utils.distanceBetweenPoints(t,e)})),a=Math.min(...e);return Game.creatures[e.indexOf(a)]}highest_food(){var t=Game.food.map((function(t){return t.y})),e=Math.min(...t);return Game.food[t.indexOf(e)]}least_rotation(){this.get_angle();var t=this,e=Game.food.map((function(e){var a=Utils.angleBetweenPoints(e,t);return Math.abs(Utils.angleDifference(a,t.angle))})),a=Math.max(...e);return Game.food[e.indexOf(a)]}most_rotation(){this.get_angle();var t=this,e=Game.food.map((function(e){var a=Utils.angleBetweenPoints(e,t);return Math.abs(Utils.angleDifference(a,t.angle))})),a=Math.min(...e);return Game.food[e.indexOf(a)]}farthest_food(){var t=this,e=Game.food.map((function(e){return Utils.distanceBetweenPoints(t,e)})),a=Math.max(...e);return Game.food[e.indexOf(a)]}random_food(){return Game.food[Math.floor(Math.random()*Game.food.length)]}eat(){this.last_ate_tick=Game.tick,this.health+=1,this.speed+=.1,this.set_target(),this.grow_tail()}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Follower=class{constructor(){}move(){this.get_angle(),this.x=Math.cos(this.angle*Math.PI/180)*(this.get_speed()/7)+this.x,this.y=Math.sin(this.angle*Math.PI/180)*(this.get_speed()/7)+this.y,this.history.push({x:this.x,y:this.y}),this.history.length>=10&&this.history.shift(),this.remove&&Utils.outOfRange(this)&&(console.log("snake removed because it is out of bounds"),this.remove())}get_angle(){var t=Utils.angleDifference(this.angle_to_target(),this.angle);this.angle-=t/(200/(this.turn_speed/5))}angle_to_target(){return Utils.angleBetweenPoints(this,this.target)}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.LifeSpan=class{constructor(){}check_lifespan(){Game.tick>this.birth_tick+this.life_span&&this.remove()}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.TailBiter=class{constructor(){}bite_tail(){var t=this;Game.creatures.forEach((function(e){e.tail_segments&&e.tail_segments.forEach((function(a){Utils.touching(t,a)&&a.active&&(t.bite(e),a.get_bitten(),e.get_bitten())}))}))}},"undefined"==typeof Static&&(Static={}),Static.Food=class extends Concerns.Catchable{constructor(){super(),this.x=Math.floor(Math.random()*Game.width),this.y=Math.floor(Math.random()*Game.height),this.size=6,this.colour="rgba(0, 256, 256, 0.8)",Game.drawables.push(this),Game.updatables.push(this),Game.food.push(this),Game.creatures.forEach((function(t){t.see_new_food()}))}draw(){Game.canvas.draw_square(this)}update(){this.caught()&&(this.remove(),this.caught_by().eat())}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.food.splice(Game.food.indexOf(this),1)}},"undefined"==typeof Static&&(Static={}),Static.Poison=class extends Concerns.Catchable{constructor(){super(),this.x=Math.floor(Math.random()*Game.width),this.y=Math.floor(Math.random()*Game.height),this.size=6,this.colour="rgba(256, 0, 0, 0.8)",Game.drawables.push(this),Game.updatables.push(this)}draw(){Game.canvas.draw_square(this)}update(){this.caught()&&(this.remove(),Player.increase_difficulty(),Player.health.decrement(1))}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Chaser=class extends(mix(Concerns.Follower,Concerns.Catchable,Concerns.TailBiter,Concerns.LifeSpan)){constructor(t,e){super(),this.target=Player.head,this.x=t,this.y=e,this.size=20,this.life_span=1e3,this.colour="rgba(255,0,0,0.6)",this.turn_speed=20,this.speed=15,this.angle=Utils.angleBetweenPoints(this,Player.head),this.history=[],Game.updatables.push(this),Game.drawables.push(this),Game.creatures.push(this),this.birth_tick=Game.tick}update(){this.move(),this.bite_tail(),this.caught()&&(Player.health.decrement(5),this.remove()),this.check_lifespan()}get_speed(){return this.speed}draw(){Game.canvas.draw_circle(this)}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Missile=class extends(mix(Concerns.Follower,Concerns.Catchable,Concerns.TailBiter)){constructor(t,e){super(),this.x=t,this.y=e,this.size=20,this.turn_speed=0,this.speed=50,this.angle=Utils.angleBetweenPoints(this,Player.head),this.history=[],Game.updatables.push(this),Game.drawables.push(this),Game.creatures.push(this)}update(){this.move(),this.bite_tail(),this.caught()&&(Player.health.decrement(5),this.remove())}get_speed(){return this.speed}draw(){Game.canvas.draw_triangle(this)}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Snake=class extends(mix(Concerns.Follower,Concerns.TailBiter,Concerns.Eater)){constructor(){super(),this.target={x:0,y:0},this.x=Math.random()*Game.width,this.y=Math.random()*Game.height,this.size=40,this.turn_speed=40,this.speed=20,this.angle=0,this.tail_segments=[],this.history=[],this.health=20,this.last_ate_tick=Game.tick,this.idling=!1,this.grow_tail(),this.grow_tail(),Game.updatables.push(this),Game.drawables.push(this),Game.creatures.push(this)}set_strategy(t){if(!Strategies[t])throw"Unknown strategy: "+t;this.strategy=Strategies[t]}update(){for(var t in this.move(),this.bite_tail(),this.tail_segments)this.tail_segments[t].move();Game.food.includes(this.target)||this.set_target(),this.health<=0&&(console.log("snake removed because it's tail was bitten"),this.remove()),this.check_for_starvation()}draw(){for(var t in Game.canvas.draw_circle(this),this.tail_segments)this.tail_segments[t].draw()}get_speed(){return this.speed}get_bitten(){this.speed=20}bite(t){this.last_ate_tick=Game.tick,this.speed+=t.speed/10}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.creatures.splice(Game.creatures.indexOf(this),1)}grow_tail(){var t=this.tail_segments[this.tail_segments.length-1];null==t&&(t=this),this.tail_segments.push(new Creatures.TailSegment(t,this))}check_for_starvation(){Game.tick-this.last_ate_tick>Config.starvation_interval&&(0==this.tail_segments.length?(console.log("snake died of starvation"),this.remove()):(console.log("snake got shorter"),this.last_ate_tick=Game.tick,this.tail_segments.pop()))}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.TailSegment=class extends(mix(Concerns.Follower)){constructor(t,e){super(),this.head=e,t.history[0]?(this.x=t.history[0].x,this.y=t.history[0].y):(this.x=t.x,this.y=t.y),this.size=30,this.speed=t.speed,this.colour=e.colour,this.turn_speed=100,this.angle=t.angle,this.target=t,this.history=[],this.active=e.tail_segments.length>1}draw(){Game.canvas.draw_circle(this)}get_speed(){return this.head.speed}get_bitten(){this.head.health-=2*(this.head.tail_segments.length-this.head.tail_segments.indexOf(this)),this.head.tail_segments.splice(this.head.tail_segments.indexOf(this),this.head.tail_segments.length-1)}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Teleporter=class extends(mix(Concerns.Catchable,Concerns.TailBiter,Concerns.LifeSpan)){constructor(t,e,a){super(),this.jump_size=200,this.teleport_interval=100,this.teleport_warning=50,this.target=Player.head,this.x=t,this.y=e,this.size=20,this.colour="rgba(255,0,0,0.6)",this.angle=Utils.angleBetweenPoints(this,Player.head),this.life_span=1e3,this.history=[],Game.updatables.push(this),Game.drawables.push(this),Game.creatures.push(this),this.move_target={x:0,y:0,colour:"rgba(255,0,0,0.6)",size:5},this.teleport_end=Game.tick,this.target_set=!1,this.birth_tick=Game.tick}update(){this.bite_tail(),this.caught()&&(Player.health.decrement(5),this.remove()),this.warn_teleport()&&!this.target_set&&(this.set_target(),this.target_set=!0),this.teleporting()&&(this.x=this.move_target.x,this.y=this.move_target.y,this.teleport_end=Game.tick,this.target_set=!1),this.check_lifespan()}draw(){Game.canvas.draw_circle(this),this.warn_teleport()&&(Game.canvas.draw_line(this,this.move_target,"rgba(255, 0, 0 , 1)",2),Game.canvas.draw_circle(this.move_target))}warn_teleport(){return Game.tick>=this.teleport_end+this.teleport_interval}teleporting(){return Game.tick>=this.teleport_end+this.teleport_interval+this.teleport_warning}set_target(){this.get_angle();var t=this.jump_size,e=Utils.distanceBetweenPoints(this,this.target);t>e&&(t=e),this.move_target.x=Math.cos(this.angle*Math.PI/180)*t+this.x,this.move_target.y=Math.sin(this.angle*Math.PI/180)*t+this.y}get_angle(){this.angle-=Utils.angleDifference(this.angle_to_target(),this.angle)}angle_to_target(){return Utils.angleBetweenPoints(this,this.target)}};