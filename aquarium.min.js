!function(f,a,c){var s,l=256,p="random",d=c.pow(l,6),g=c.pow(2,52),y=2*g,h=255;function n(n,t,r){function e(){for(var n=u.g(6),t=d,r=0;n<g;)n=(n+r)*l,t*=l,r=u.g(1);for(;y<=n;)n/=2,t/=2,r>>>=1;return(n+r)/t}var o=[],i=j(function n(t,r){var e,o=[],i=typeof t;if(r&&"object"==i)for(e in t)try{o.push(n(t[e],r-1))}catch(n){}return o.length?o:"string"==i?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[n,S(a)]:null==n?function(){try{var n;return s&&(n=s.randomBytes)?n=n(l):(n=new Uint8Array(l),(f.crypto||f.msCrypto).getRandomValues(n)),S(n)}catch(n){var t=f.navigator,r=t&&t.plugins;return[+new Date,f,r,f.screen,S(a)]}}():n,3),o),u=new m(o);return e.int32=function(){return 0|u.g(4)},e.quick=function(){return u.g(4)/4294967296},e.double=e,j(S(u.S),a),(t.pass||r||function(n,t,r,e){return e&&(e.S&&v(e,u),n.state=function(){return v(u,{})}),r?(c[p]=n,t):n})(e,i,"global"in t?t.global:this==c,t.state)}function m(n){var t,r=n.length,u=this,e=0,o=u.i=u.j=0,i=u.S=[];for(r||(n=[r++]);e<l;)i[e]=e++;for(e=0;e<l;e++)i[e]=i[o=h&o+n[e%r]+(t=i[e])],i[o]=t;(u.g=function(n){for(var t,r=0,e=u.i,o=u.j,i=u.S;n--;)t=i[e=h&e+1],r=r*l+i[h&(i[e]=i[o=h&o+t])+(i[o]=t)];return u.i=e,u.j=o,r})(l)}function v(n,t){return t.i=n.i,t.j=n.j,t.S=n.S.slice(),t}function j(n,t){for(var r,e=n+"",o=0;o<e.length;)t[h&o]=h&(r^=19*t[h&o])+e.charCodeAt(o++);return S(t)}function S(n){return String.fromCharCode.apply(0,n)}if(j(c.random(),a),"object"==typeof module&&module.exports){module.exports=n;try{s=require("crypto")}catch(n){}}else"function"==typeof define&&define.amd?define((function(){return n})):c["seed"+p]=n}("undefined"!=typeof self?self:this,[],Math),Config={min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:5,famine:!1,starting_snakes:[{colour:"rgb(255,0,0,0.4)",strategy:"nearest",count:10},{colour:"rgb(0,255,0,0.4)",strategy:"farthest",count:10},{colour:"rgb(0,0,255,0.4)",strategy:"random",count:10},{colour:"rgb(128,128,128,0.4)",strategy:"low_turning",count:10},{colour:"rgb(128,0,128,0.4)",strategy:"high_turning",count:10},{colour:"rgb(255,128,0,0.4)",strategy:"top_hugger",count:10},{colour:"rgb(0,0,0,0.4)",strategy:"parasite",count:10}],min_starting_snakes:1,starvation_interval:500};class Game{static init(){switch(this.cli_mode="undefined"==typeof document,this.cli_mode?(this.width=1024,this.height=768):(this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas=new Canvas,this.canvas.canvas.width=this.width,this.canvas.canvas.height=this.height),this.tick=0,Game.drawables=[],Game.updatables=[],Game.last_food_tick=0,Game.food=[],Game.snakes=[],Config.starting_food_mode){case"rng":Game.add_random_foods(Config.starting_food);break;case"grid":Game.add_food_grid(Config.grid_size)}var starting_snakes_left=Config.min_starting_snakes;Config.starting_snakes.forEach((function(config){[...Array(config.count)].forEach((function(_){Game.add_snake("Snake",config.colour,config.strategy),starting_snakes_left--}))})),starting_snakes_left>0&&[...Array(starting_snakes_left)].forEach((function(_){Game.add_random_snake()})),this.cli_mode||(Game.draw_loop=setInterval((function(){requestAnimationFrame(Game.draw)}),10),Game.update_loop=setInterval(Game.update,10))}static update(){Game.updatables.forEach((function(updatable){updatable.update()})),Game.add_food(),Game.tick++,Game.snakes.length<Config.min_snakes&&Game.add_random_snake(),0==Game.snakes.length&&Game.end()}static draw(){Game.canvas.clear(),Game.drawables.forEach((function(drawable){drawable.draw()}))}static add_random_snake(){var config=Config.starting_snakes[Math.floor(Math.random()*Config.starting_snakes.length)];Game.add_snake("Snake",config.colour,config.strategy)}static add_random_foods(n){[...Array(n)].forEach((function(_){Game.add_food()}))}static add_food_grid(size){for(var grid_width=Math.floor(Game.width/size),grid_height=Math.floor(Game.height/size),row=0,col=0;row<=grid_height;){for(col=0;col<=grid_width;){var food=new Static.Food;food.x=col*size,food.y=row*size,col++}row++}}static add_food(){Game.tick-Game.last_food_tick>=Config.food_interval&&(Game.last_food_tick=Game.tick,new Static.Food)}static add_snake(type,colour,strategy){var snake=new Creatures.Snake;return snake.colour=colour,snake.set_strategy(strategy),snake}static end(){clearInterval(Game.draw_loop),clearInterval(Game.update_loop)}}class Canvas{constructor(){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.to_radians=Math.PI/180}draw_circle(source){this.ctx.lineWidth=5,this.ctx.fillStyle=source.colour,this.ctx.beginPath(),this.ctx.arc(source.x,source.y,source.size,0,360),this.ctx.fill()}draw_square(source){this.ctx.lineWidth=5,this.ctx.strokeStyle=source.colour,this.ctx.strokeRect(source.x-source.size/2,source.y-source.size/2,source.size,source.size)}draw_text(text,x,y,colour,align,size){this.ctx.font=size+"px Arial",this.ctx.textAlign=align,this.ctx.fillStyle=colour,this.ctx.fillText(text,x,y)}draw_line(thing_one,thing_two,colour,thickness){this.ctx.lineWidth=thickness,this.ctx.strokeStyle=colour,this.ctx.beginPath(),this.ctx.moveTo(thing_one.x,thing_one.y),this.ctx.lineTo(thing_two.x,thing_two.y),this.ctx.stroke()}clear(){this.ctx.clearRect(0,0,Game.width,Game.height)}}class Utils{static angleDifference(angle1,angle2){var diff=(angle2-angle1+180)%360-180;return diff<-180?diff+360:diff}static outOfRange(thing){return thing.x<-200||thing.x>Game.width+200||thing.y<-200||thing.y>Game.height+200}static angleBetweenPoints(thing_one,thing_two){return 180*Math.atan2(thing_one.y-thing_two.y,thing_one.x-thing_two.x)/Math.PI+180}static distanceBetweenPoints(thing_one,thing_two){var a=thing_one.x-thing_two.x,b=thing_one.y-thing_two.y;return Math.sqrt(a*a+b*b)}static touching(thing_one,thing_two){return Utils.distanceBetweenPoints(thing_one,thing_two)<=thing_one.size+thing_two.size}static median(array){var mid=Math.floor(array.length/2);return[...array].sort((a,b)=>a-b)[mid]}}function mix(...mixins){class Mix{}for(let mixin of mixins)copyProperties(Mix,mixin),copyProperties(Mix.prototype,mixin.prototype);return Mix}function copyProperties(target,source){for(let key of Reflect.ownKeys(source))if("constructor"!==key&&"prototype"!==key&&"name"!==key){let desc=Object.getOwnPropertyDescriptor(source,key);Object.defineProperty(target,key,desc)}}Strategies={nearest:{see_new:"retarget",target_type:"nearest_food"},farthest:{see_new:"nothing",target_type:"farthest_food"},random:{see_new:"nothing",target_type:"random_food"},low_turning:{see_new:"retarget",target_type:"least_rotation"},high_turning:{see_new:"nothing",target_type:"most_rotation"},top_hugger:{see_new:"retarget",target_type:"highest_food"},parasite:{see_new:"nothing",target_type:"nearest_snake"}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Catchable=class{constructor(){}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.snakes.splice(Game.snakes.indexOf(this),1)}caught_by(){var catchable=this;return Game.snakes.find((function(snake){return Utils.touching(catchable,snake)}))}caught(){var catchable=this,result=!1;return Game.snakes.forEach((function(snake){Utils.touching(catchable,snake)&&(result=!0)})),result}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Eater=class{see_new_food(){"retarget"==this.strategy.see_new&&this.set_target()}set_target(){Game.food.length>0?(this.idling=!1,void 0===this.strategy?this.target=this.random_food():this.target=this[this.strategy.target_type]()):this.idle()}idle(){void 0===this.idle_target_tick&&(this.idle_target_tick=Game.tick),void 0===this.idle_inteval&&(this.idle_interval=400*Math.random()+100),Game.tick-this.idle_target_tick>100&&(this.idle_target_tick=Game.tick,this.target={x:Math.random()*Game.width,y:Math.random()*Game.height})}nearest_food(){var eater=this,distances=Game.food.map((function(food){return Utils.distanceBetweenPoints(eater,food)})),min_distance=Math.min(...distances);return Game.food[distances.indexOf(min_distance)]}nearest_snake(){var eater=this,distances=Game.snakes.map((function(snake){if(snake==eater)return 99999;var length=snake.tail_segments.length;return Utils.distanceBetweenPoints(eater,snake)-1e3*length})),min_distance=Math.min(...distances);return Game.snakes[distances.indexOf(min_distance)]}highest_food(){var heights=Game.food.map((function(food){return food.y})),min_height=Math.min(...heights);return Game.food[heights.indexOf(min_height)]}least_rotation(){this.get_angle();var eater=this,angles=Game.food.map((function(food){var angle=Utils.angleBetweenPoints(food,eater);return Math.abs(Utils.angleDifference(angle,eater.angle))})),min_angle=Math.max(...angles);return Game.food[angles.indexOf(min_angle)]}most_rotation(){this.get_angle();var eater=this,angles=Game.food.map((function(food){var angle=Utils.angleBetweenPoints(food,eater);return Math.abs(Utils.angleDifference(angle,eater.angle))})),max_angle=Math.min(...angles);return Game.food[angles.indexOf(max_angle)]}farthest_food(){var eater=this,distances=Game.food.map((function(food){return Utils.distanceBetweenPoints(eater,food)})),max_distance=Math.max(...distances);return Game.food[distances.indexOf(max_distance)]}random_food(){return Game.food[Math.floor(Math.random()*Game.food.length)]}eat(){this.last_ate_tick=Game.tick,this.health+=1,this.speed+=.1,this.set_target(),this.grow_tail()}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.Follower=class{constructor(){}move(){this.get_angle(),this.x=Math.cos(this.angle*Math.PI/180)*(this.get_speed()/7)+this.x,this.y=Math.sin(this.angle*Math.PI/180)*(this.get_speed()/7)+this.y,this.history.push({x:this.x,y:this.y}),this.history.length>=25&&this.history.shift(),this.remove&&Utils.outOfRange(this)&&(console.log(Game.tick+": snake removed because it is out of bounds"),this.remove())}get_angle(){var angle_difference=Utils.angleDifference(this.angle_to_target(),this.angle);this.angle-=angle_difference/(200/(this.turn_speed/5))}angle_to_target(){return Utils.angleBetweenPoints(this,this.target)}},"undefined"==typeof Concerns&&(Concerns={}),Concerns.TailBiter=class{constructor(){}bite_tail(){var me=this;Game.snakes.forEach((function(snake){snake.tail_segments&&snake.tail_segments.forEach((function(segment){Utils.touching(me,segment)&&segment.active&&(me.bite(snake),segment.get_bitten(),snake.get_bitten())}))}))}},"undefined"==typeof Static&&(Static={}),Static.Food=class extends Concerns.Catchable{constructor(){super(),this.x=Math.floor(Math.random()*Game.width),this.y=Math.floor(Math.random()*Game.height),this.size=6,this.colour="rgba(0, 256, 256, 0.8)",Game.drawables.push(this),Game.updatables.push(this),Game.food.push(this),Game.snakes.forEach((function(snake){snake.see_new_food()}))}draw(){Game.canvas.draw_square(this)}update(){this.caught()&&(this.remove(),this.caught_by().eat())}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.food.splice(Game.food.indexOf(this),1),1==Config.famine&&(Config.food_interval+=10)}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.Snake=class extends(mix(Concerns.Follower,Concerns.TailBiter,Concerns.Eater)){constructor(){super(),this.target={x:0,y:0},this.x=Math.random()*Game.width,this.y=Math.random()*Game.height,this.size=40,this.turn_speed=40,this.speed=20,this.angle=0,this.tail_segments=[],this.history=[],this.health=20,this.last_ate_tick=Game.tick,this.idling=!1,this.grow_tail(),this.grow_tail(),Game.updatables.push(this),Game.drawables.push(this),Game.snakes.push(this)}set_strategy(strategy){if(!Strategies[strategy])throw"Unknown strategy: "+strategy;this.strategy=Strategies[strategy]}update(){for(var segment in this.move(),this.bite_tail(),this.tail_segments)this.tail_segments[segment].move();Game.food.includes(this.target)||this.set_target(),this.health<=0&&(console.log(Game.tick+": snake removed because it's tail was bitten"),this.remove()),this.check_for_starvation()}draw(){for(var segment in Game.canvas.draw_circle(this),this.tail_segments)this.tail_segments[segment].draw()}get_speed(){return this.speed}get_bitten(){this.speed=20}bite(snake){this.last_ate_tick=Game.tick,this.speed+=snake.speed/10}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1),Game.drawables.splice(Game.drawables.indexOf(this),1),Game.snakes.splice(Game.snakes.indexOf(this),1)}grow_tail(){var target=this.tail_segments[this.tail_segments.length-1];null==target&&(target=this),this.tail_segments.push(new Creatures.TailSegment(target,this))}check_for_starvation(){Game.tick-this.last_ate_tick>Config.starvation_interval&&(0==this.tail_segments.length?(console.log(Game.tick+": snake died of starvation"),this.remove()):(this.last_ate_tick=Game.tick,this.tail_segments.pop()))}},"undefined"==typeof Creatures&&(Creatures={}),Creatures.TailSegment=class extends(mix(Concerns.Follower)){constructor(previous,head){super(),this.head=head,previous.history[0]?(this.x=previous.history[0].x,this.y=previous.history[0].y):(this.x=previous.x,this.y=previous.y),this.size=30,this.speed=previous.speed,this.colour=head.colour,this.turn_speed=100,this.angle=previous.angle,this.target=previous,this.history=[],this.active=head.tail_segments.length>1}draw(){Game.canvas.draw_circle(this)}get_speed(){return this.head.speed}get_bitten(){this.head.health-=2*(this.head.tail_segments.length-this.head.tail_segments.indexOf(this)),this.head.tail_segments.splice(this.head.tail_segments.indexOf(this),this.head.tail_segments.length-1)}};