var exports=require("./aquarium.cli.min"),Game=exports.Game,Config=exports.Config,Configs=exports.Configs,Behaviours=exports.Behaviours;class Validator{constructor(behaviour_name){this.errors=[],this.behaviour_name=behaviour_name,this.behaviour=new Behaviours[behaviour_name]("dummyval")}check(){var validator=this;console.log("Checking "+this.behaviour_name),Object.keys(Validator.checks).forEach((function(check_name){var check=Validator.checks[check_name];try{validator.add_error_array(check(validator))}catch(error){validator.add_error("Error running check '"+check_name+"': "+error)}})),this.errors.length>0&&console.log("Errors: "+this.errors.join("\n"))}add_error(error){this.errors.push(error)}add_error_array(errors){this.errors=this.errors.concat(errors)}}void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.colour=function(validator){var errors=[],colour=validator.behaviour.colour();if("string"==typeof colour){var parts=/rgba\(([0-9]+),([0-9]+),([0-9]+),([0-9\.]+)\)/gm.exec(colour);parts[1],parts[2],parts[3],parts[4]}else errors.push("Behaviour should have a colour() method returning a string");return errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.name=function(validator){var errors=[],name=validator.behaviour.name();return"string"!=typeof name&&errors.push("Behaviour should have a name() method returning a string"),name.length&&name.length>30&&errors.push("Behaviour name() should not be more than 30 characters long"),errors};module.exports = Validator
