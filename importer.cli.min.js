const request=require("request");var exports=require("./aquarium.cli.min.js"),Behaviour=exports.Behaviour,Behaviours=exports.Behaviours;const BehaviourBuilder=require("./importer/behaviour_builder.js");class Fetcher{constructor(question_id,site){this.url="https://api.stackexchange.com/2.2/questions/"+question_id+"/answers?site="+site+"&filter=!.FjsvG2X2tViZPCgDuGvW88wrGptD",this.builder=new BehaviourBuilder,this.parser=require("node-html-parser"),this.builder.clear_directory(),this.builder.move_defaults()}validate_defaults(){console.log("Checking Behaviours in default_behaviours/"),Object.keys(Behaviours).forEach((function(behaviour_name){console.log(""),console.log("-----------------------------------------"),new Validator(Behaviours[behaviour_name]).check()}))}get_answers(){var fetcher=this;request(this.url,{json:!0,gzip:!0},(function(err,res,body){if(err)throw console.log("error in get_answers"),err;fetcher.data=body,fetcher.import_answers()}))}import_answers(){console.log(""),console.log("-----------------------------------------"),console.log("Checking answers from Stack Exchange");var fetcher=this;fetcher.data.items.forEach((function(answer){try{console.log(""),console.log("-----------------------------------------");var id=answer.answer_id,user=answer.owner.display_name.toLowerCase().replace(" ","_"),doc=fetcher.parser.parse(answer.body,{pre:!0}),title=doc.querySelector("h1").text;console.log("Importing answer "+id+" from "+user+" entitled '"+title+"'");var code=doc.querySelector("pre").text;code=(code=code.replace("<code>","")).replace("</code>","");var klass=fetcher.build_class(title,code);Behaviours[title]=klass;var validator=new Validator(klass);if(validator.check(),validator.valid()){var file_name=title.toLowerCase().replace(" ","_")+".js";console.log(title+" is valid, moving to /behaviours/"+file_name),fetcher.builder.write_to_file(file_name,code)}else console.log(title+" could not be imported.");console.log("-----------------------------------------")}catch(er){id=answer.answer_id,user=answer.owner.display_name.toLowerCase().replace(" ","_");console.log("Error importing answer "+id+" by "+user+": "+er),console.log("-----------------------------------------")}}))}build_class(title,code){eval(code);var klass=Behaviours[title];if("function"==typeof klass)return klass;throw title+" can not be imported, it does not add a class to Behaviours with the key "+title}}var exports=require("./aquarium.cli.min");Game=exports.Game,Config=exports.Config,Configs=exports.Configs,Behaviours=exports.Behaviours;class Validator{constructor(behaviour_class){Config.index=Object.keys(Behaviours).indexOf(behaviour_class.name),Game.init(Config.build_config(Configs.grid)),this.errors=[],this.behaviour_class=behaviour_class;try{this.snake=new Creatures.Snake(behaviour_class),this.behaviour=this.snake.behaviour,this.behaviour_name=Object.getPrototypeOf(this.behaviour).constructor.name}catch(er){this.errors.push("Couldn't initialize snake, this error is seen: "+er)}}check(){if(this.valid()){var validator=this;console.log("Checking "+this.behaviour_name),Object.keys(Validator.checks).forEach((function(check_name){var check=Validator.checks[check_name];try{validator.add_error_array(check(validator))}catch(error){validator.add_error("Error running check '"+check_name+"': "+error)}})),this.valid()||console.log("Errors: "+this.errors.join("\n"))}else console.log("Errors: "+this.errors.join("\n"))}add_error(error){this.errors.push(error)}add_error_array(errors){this.errors=this.errors.concat(errors)}valid(){return 0==this.errors.length}}void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.class=function(validator){var errors=[];return Object.getPrototypeOf(validator.behaviour_class).name,"Behaviour"!=Object.getPrototypeOf(validator.behaviour_class).name&&errors.push("This class should extend the Behaviour class"),errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.colour=function(validator){var errors=[],colour=validator.behaviour.colour();if("string"==typeof colour){var parts=/rgba\(([0-9]+),([0-9]+),([0-9]+),([0-9\.]+)\)/gm.exec(colour);if(parts){var colours=[parts[1],parts[2],parts[3]];["red","green","blue"].forEach((function(colour,i){var colour_value=parseFloat(colours[i]);colour_value>255&&errors.push("colour(): "+colour+" must be between 0 and 255. It's currently "+colour_value)}));var alpha=parts[4];(alpha<.3||alpha>.5)&&errors.push("colour(): Alpha value should be between 0.3 and 0.5, currently it's "+alpha)}else errors.push("colour() function should return a valid rgba colour. Returns '"+colour+"'")}else errors.push("Behaviour should have a colour() method returning a string");return errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.name=function(validator){var errors=[],name=validator.behaviour.name();return"string"!=typeof name&&errors.push("Behaviour should have a name() method returning a string"),name&&name.length>30&&errors.push("Behaviour name() should not be more than 30 characters long"),errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.no_console_log=function(validator){var errors=[];return validator.behaviour_class.toString().includes("console.")&&errors.push("Behaviour should not make calls to the console object"),errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.no_food_error=function(validator){var errors=[],old_food=Game.food;Game.food=[];try{validator.behaviour.set_target(),Game.update()}catch(er){errors.push("Behaviour.set_target() throws an error when there's no food: "+er)}return Game.food=old_food,errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.no_game_access=function(validator){var errors=[],code=validator.behaviour_class.toString();return["Game","Config","Configs","Behaviours","Concerns","Static","Canvas"].forEach((function(forbidden){code.includes(forbidden)&&errors.push('Behaviour should not try to directly call game components. It references "'+forbidden+'"')})),errors},void 0===Validator.checks&&(Validator.checks=[]),Validator.checks.set_target=function(validator){var errors=[],set_target=validator.behaviour_class.prototype.set_target;"function"==typeof set_target?set_target.toString().includes("this.target(")||errors.push("Behaviour.set_target() should call this.target()"):errors.push("Behaviour should have a function named set_target()");return errors};module.exports = {Validator: Validator, Fetcher: Fetcher}
