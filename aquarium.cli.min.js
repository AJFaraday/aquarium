!function(f,a,c){var s,l=256,p="random",d=c.pow(l,6),g=c.pow(2,52),y=2*g,h=l-1;function n(n,t,r){function e(){for(var n=u.g(6),t=d,r=0;n<g;)n=(n+r)*l,t*=l,r=u.g(1);for(;y<=n;)n/=2,t/=2,r>>>=1;return(n+r)/t}var o=[],i=j(function n(t,r){var e,o=[],i=typeof t;if(r&&"object"==i)for(e in t)try{o.push(n(t[e],r-1))}catch(n){}return o.length?o:"string"==i?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[n,S(a)]:null==n?function(){try{var n;return s&&(n=s.randomBytes)?n=n(l):(n=new Uint8Array(l),(f.crypto||f.msCrypto).getRandomValues(n)),S(n)}catch(n){var t=f.navigator,r=t&&t.plugins;return[+new Date,f,r,f.screen,S(a)]}}():n,3),o),u=new m(o);return e.int32=function(){return 0|u.g(4)},e.quick=function(){return u.g(4)/4294967296},e.double=e,j(S(u.S),a),(t.pass||r||function(n,t,r,e){return e&&(e.S&&v(e,u),n.state=function(){return v(u,{})}),r?(c[p]=n,t):n})(e,i,"global"in t?t.global:this==c,t.state)}function m(n){var t,r=n.length,u=this,e=0,o=u.i=u.j=0,i=u.S=[];for(r||(n=[r++]);e<l;)i[e]=e++;for(e=0;e<l;e++)i[e]=i[o=h&o+n[e%r]+(t=i[e])],i[o]=t;(u.g=function(n){for(var t,r=0,e=u.i,o=u.j,i=u.S;n--;)t=i[e=h&e+1],r=r*l+i[h&(i[e]=i[o=h&o+t])+(i[o]=t)];return u.i=e,u.j=o,r})(l)}function v(n,t){return t.i=n.i,t.j=n.j,t.S=n.S.slice(),t}function j(n,t){for(var r,e=n+"",o=0;o<e.length;)t[h&o]=h&(r^=19*t[h&o])+e.charCodeAt(o++);return S(t)}function S(n){return String.fromCharCode.apply(0,n)}if(j(c.random(),a),"object"==typeof module&&module.exports){module.exports=n;try{s=require("crypto")}catch(n){}}else"function"==typeof define&&define.amd?define((function(){return n})):c["seed"+p]=n}("undefined"!=typeof self?self:this,[],Math);class Game{static init(config){if(typeof Math.seedrandom=="function"){Math.seedrandom("aquarium",{global:true})}else{var seedrandom=require("seedrandom");seedrandom("aquarium",{global:true})}this.config=config;console.log("Running Config: "+config.name);this.cli_mode=typeof document==="undefined";if(this.cli_mode){this.width=1024;this.height=768}else{if(localStorage.getItem("standard")=="true"){this.width=1024;this.height=768}else{this.width=document.documentElement.clientWidth;this.height=document.documentElement.clientHeight}this.canvas=new Canvas;this.canvas.canvas.width=this.width;this.canvas.canvas.height=this.height}this.tick=0;Game.drawables=[];Game.updatables=[];Game.last_food_tick=0;Game.food=[];Game.snakes=[];Game.ended=false;this.drawables.push(new Static.Text(this.config.name,20,40,30,"left"));switch(Game.config.starting_food_mode){case"rng":Game.add_random_foods(Game.config.starting_food);break;case"grid":Game.add_food_grid(Game.config.grid_size)}Stats.clear();this.snake_registry={};var starting_snakes_left=Game.config.min_starting_snakes;Game.config.starting_behaviours.forEach((function(behaviour){[...Array(Game.config.snakes_of_each_behaviour)].forEach((function(_){Game.add_snake(behaviour);starting_snakes_left--}))}));if(starting_snakes_left>0){[...Array(starting_snakes_left)].forEach((function(_){Game.add_random_snake()}))}if(!this.cli_mode){Game.draw_loop=setInterval((function(){requestAnimationFrame(Game.draw)}),10);Game.update_loop=setInterval(Game.update,10)}}static update(){Game.updatables.forEach((function(updatable){updatable.update()}));Game.add_food();Game.tick++;if(Game.snakes.length<Game.config.min_snakes){Game.add_random_snake()}if(Game.snakes.length==0){Game.game_over_message("Game over: No snakes remain");Game.end()}else{Game.snakes.forEach((function(snake){snake.behaviour.every_tick()}))}if(Game.tick>=3e4){Game.game_over_message("Game Over: 5 minute limit has been reached");Game.end()}}static game_over_message(text){console.log(Game.tick+": "+text);Game.drawables.push(new Static.Text(text+"("+Game.tick+")",Game.width-20,40,30,"right"))}static draw(){Game.canvas.clear();Game.drawables.forEach((function(drawable){drawable.draw()}));var stat_mode=localStorage.getItem("stat_mode");if(stat_mode=="1"||stat_mode==1){Stats.draw_summaries()}else if(stat_mode=="2"||stat_mode==2){Stats.draw_snakes()}}static add_random_snake(){var behaviour=Game.config.respawn_behaviours[Math.floor(Math.random()*Game.config.respawn_behaviours.length)];Game.add_snake(behaviour)}static add_random_foods(n){[...Array(n)].forEach((function(_){new Static.Food}))}static add_food_grid(size){var grid_width=Math.floor(Game.width/size);var grid_height=Math.floor(Game.height/size);var row=0;var col=0;while(row<=grid_height){col=0;while(col<=grid_width){var food=new Static.Food;food.x=col*size;food.y=row*size;col++}row++}}static add_food(){if(Game.tick-Game.last_food_tick>=Game.config.food_interval){Game.last_food_tick=Game.tick;new Static.Food}}static add_snake(behaviour){var snake=new Creatures.Snake(behaviour);return snake}static end(){Game.ended=true;clearInterval(Game.draw_loop);clearInterval(Game.update_loop)}static register_snake(name){if(typeof Game.snake_registry[name]=="undefined"){Game.snake_registry[name]=0}Game.snake_registry[name]++;return name+"["+Game.snake_registry[name]+"]"}}class Canvas{constructor(){this.canvas=document.getElementById("canvas");this.ctx=this.canvas.getContext("2d");this.to_radians=Math.PI/180;addEventListener("keyup",(function(e){if(e.key=="m"){window.open("menu.html")}else if(e.key=="s"){var stat_mode=parseInt(localStorage.getItem("stat_mode")||0);stat_mode+=1;stat_mode%=3;localStorage.setItem("stat_mode",stat_mode)}}))}draw_circle(source){this.ctx.lineWidth=5;this.ctx.fillStyle=source.colour;this.ctx.beginPath();this.ctx.arc(source.x,source.y,source.size,0,360);this.ctx.fill()}draw_square(source){this.ctx.lineWidth=5;this.ctx.strokeStyle=source.colour;this.ctx.strokeRect(source.x-source.size/2,source.y-source.size/2,source.size,source.size)}draw_text(text,x,y,colour,align,size){this.ctx.font=size+"px Arial";this.ctx.textAlign=align;this.ctx.fillStyle=colour;this.ctx.fillText(text,x,y)}draw_line(thing_one,thing_two,colour,thickness){this.ctx.lineWidth=thickness;this.ctx.strokeStyle=colour;this.ctx.beginPath();this.ctx.moveTo(thing_one.x,thing_one.y);this.ctx.lineTo(thing_two.x,thing_two.y);this.ctx.stroke()}clear(){this.ctx.clearRect(0,0,Game.width,Game.height)}}class Utils{static angleDifference(angle1,angle2){var diff=(angle2-angle1+180)%360-180;if(diff<-180){return diff+360}else{return diff}}static outOfRange(thing){return thing.x<-200||thing.x>Game.width+200||thing.y<-200||thing.y>Game.height+200}static angleBetweenPoints(thing_one,thing_two){return Math.atan2(thing_one.y-thing_two.y,thing_one.x-thing_two.x)*180/Math.PI+180}static distanceBetweenPoints(thing_one,thing_two){var a=thing_one.x-thing_two.x;var b=thing_one.y-thing_two.y;return Math.sqrt(a*a+b*b)}static touching(thing_one,thing_two){var distance_between_things=Utils.distanceBetweenPoints(thing_one,thing_two);return distance_between_things<=thing_one.size+thing_two.size}static median(array){var mid=Math.floor(array.length/2);var nums=[...array].sort((a,b)=>a-b);return nums[mid]}static url_vars(){if(typeof window!="undefined"){var vars={};var parts=window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(m,key,value){vars[key]=value}));return vars}}static pairs_for(n_options){var n1=0;var n2=0;var pairs=[];while(n1<n_options){n2=n1;while(n2<n_options){pairs.push([n1,n2]);n2++}n1++}return pairs}static change_alpha(colour,alpha){var regex=/(rgba\([0-9]+,[0-9]+,[0-9]+,).*(\))/;var matches=colour.match(regex);return`${matches[1]}${alpha}${matches[2]}`}}String.prototype.leftJustify=function(length){var fill=[];while(fill.length+this.length<length){fill[fill.length]=" "}return this+fill.join("")};String.prototype.rightJustify=function(length){var fill=[];while(fill.length+this.length<length){fill[fill.length]=" "}return fill.join("")+this};String.prototype.toCamelCase=function(str){var camel=this.replace("_"," ").replace(/\W+(.)/g,(function(match,chr){return chr.toUpperCase()}));return camel.charAt(0).toUpperCase()+camel.slice(1)};function mix(...mixins){class Mix{}for(let mixin of mixins){copyProperties(Mix,mixin);copyProperties(Mix.prototype,mixin.prototype)}return Mix}function copyProperties(target,source){for(let key of Reflect.ownKeys(source)){if(key!=="constructor"&&key!=="prototype"&&key!=="name"){let desc=Object.getOwnPropertyDescriptor(source,key);Object.defineProperty(target,key,desc)}}}class Stats{static for_behaviour(behaviour){if(typeof Stats.stats=="undefined"){Stats.stats={}}if(typeof Stats.stats[behaviour.name()]=="undefined"){Stats.stats[behaviour.name()]=new Stats(behaviour)}return Stats.stats[behaviour.name()]}static clear(){Stats.stats=[]}static font_size(){return 20}static draw_summaries(){if(Game.canvas){var x=50;Game.canvas.draw_text("Behaviour",x,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("Pts.",x+220,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("Count",x+270,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("Avg.",x+350,70,"rgba(0,0,0,1)","left",Stats.font_size());var y=100;var stats=Object.values(Stats.stats).sort((a,b)=>a.average_score()<b.average_score()?1:-1);stats.forEach((function(stat){Game.canvas.draw_square({x:x-10,y:y-8,size:10,colour:stat.colour});Game.canvas.draw_text(stat.behaviour_name,x,y,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text(stat.total_score,x+220,y,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text(stat.current_snakes+"/"+stat.total_snakes,x+270,y,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text(stat.average_score(),x+350,y,"rgba(0,0,0,1)","left",Stats.font_size());y+=Stats.font_size()}))}}static draw_snakes(){if(Game.canvas){var x=50;Game.canvas.draw_text("Snake",x,70,"rgba(0,0,0,1)","left",Stats.font_size())}Game.canvas.draw_text("Spd.",x+220,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("Length",x+310,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("HP",x+380,70,"rgba(0,0,0,1)","left",Stats.font_size());Game.canvas.draw_text("Points.",x+430,70,"rgba(0,0,0,1)","left",Stats.font_size());var y=100;var snakes=Game.snakes;snakes=snakes.concat(Stats.dead_snakes);snakes=snakes.sort((a,b)=>a.score()<b.score()?1:-1);snakes.forEach((function(snake){var colour;if(snake.health>0){colour="rgba(0,0,0,1)"}else{colour="rgba(128,0,0,1)"}Game.canvas.draw_square({x:x-10,y:y-8,size:10,colour:snake.colour});Game.canvas.draw_text(snake.name,x,y,colour,"left",Stats.font_size());Game.canvas.draw_text(snake.speed.toFixed(3),x+220,y,colour,"left",Stats.font_size());Game.canvas.draw_text(snake.tail_segments.length,x+310,y,colour,"left",Stats.font_size());Game.canvas.draw_text(snake.health,x+380,y,colour,"left",Stats.font_size());Game.canvas.draw_text(snake.stats.scores[snake.name],x+430,y,colour,"left",Stats.font_size());y+=Stats.font_size()}))}average_score(){if(typeof this.cached_avg_tick=="undefined"||this.cached_avg_tick<Game.tick){this.cached_avg_tick=Game.tick;this.cached_avg=this.total_score/Object.values(this.scores).length}return this.cached_avg}constructor(behaviour){Stats.dead_snakes=[];this.behaviour_name=behaviour.name();this.behaviour_key=behaviour.constructor.name;this.total_score=0;this.total_snakes=0;this.current_snakes=0;this.scores={}}score_points(n,snake){this.total_score+=n;this.scores[snake.name]+=1}add_snake(snake){this.total_snakes+=1;this.current_snakes+=1;this.scores[snake.name]=0;this.colour=snake.colour}remove_snake(snake){Stats.dead_snakes.push(snake);this.current_snakes-=1}}class Behaviour{constructor(snake){this.snake=snake}set_target(){}new_food(){}target_removed(){}bite_tail(victim){}tail_bitten(bitten_by){}eat(){}eat_target(){}starve(){}every_tick(){}idle(){if(typeof this.idle_target_tick=="undefined"){this.idle_target_tick=0}if(typeof this.idle_inteval=="undefined"){this.idle_interval=Math.random()*400+100}if(this.tick()-this.idle_target_tick>this.idle_interval){this.idle_target_tick=Game.tick;this.snake.target={x:Math.random()*Game.width,y:Math.random()*Game.height}}}x(){return this.snake.x}y(){return this.snake.y}food(){return Game.food}snakes(){return Game.snakes}tick(){return Game.tick}length(){return this.snakes.tail_segments.length}last_ate_tick(){return this.snake.last_ate_tick()}utils(){return Utils}game_width(){return Game.width}game_height(){return Game.height}angle(){return this.snake.get_angle()}target(object){if(typeof object!="undefined"&&typeof object.x=="number"&&typeof object.y=="number"){this.snake.target=object}else{console.log(this.snake.name+": Invalid target object");console.log(object);throw this.snake.name+": Invalid target object"}}}if(typeof Concerns==="undefined"){Concerns={}}Concerns.Catchable=class Catchable{constructor(){}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1);Game.drawables.splice(Game.drawables.indexOf(this),1);Game.snakes.splice(Game.snakes.indexOf(this),1)}caught_by(){var catchable=this;return Game.snakes.find((function(snake){return Utils.touching(catchable,snake)}))}caught(){var catchable=this;var result=false;Game.snakes.forEach((function(snake){if(Utils.touching(catchable,snake)){result=true}}));return result}};if(typeof Concerns==="undefined"){Concerns={}}Concerns.Eater=class Eater{see_new_food(){this.behaviour.new_food()}set_target(){if(Game.food.length>0){this.behaviour.set_target()}else{this.behaviour.idle()}}eat(food){this.last_ate_tick=Game.tick;this.health+=1;this.speed+=.1;this.grow_tail();this.score_point();this.behaviour.eat();if(food==this.target){this.behaviour.eat_target()}}};if(typeof Concerns==="undefined"){Concerns={}}Concerns.Follower=class Follower{constructor(){}move(){this.get_angle();this.x=Math.cos(this.angle*Math.PI/180)*(this.get_speed()/7)+this.x;this.y=Math.sin(this.angle*Math.PI/180)*(this.get_speed()/7)+this.y;this.history.push({x:this.x,y:this.y});if(this.history.length>=25){this.history.shift()}if(this.remove&&Utils.outOfRange(this)){console.log(Game.tick+": "+this.name+" removed because it is out of bounds");this.remove()}}get_angle(){var angle_difference=Utils.angleDifference(this.angle_to_target(),this.angle);this.angle-=angle_difference/(200/(this.turn_speed/5));return this.angle}angle_to_target(){return Utils.angleBetweenPoints(this,this.target)}};if(typeof Concerns==="undefined"){Concerns={}}Concerns.TailBiter=class TailBiter{constructor(){}bite_tail(){var me=this;Game.snakes.forEach((function(snake){if(snake.tail_segments){snake.tail_segments.forEach((function(segment){if(Utils.touching(me,segment)&&segment.active){me.bite(snake);segment.get_bitten();snake.get_bitten_by(me)}}))}}))}};if(typeof Static==="undefined"){Static={}}Static.Food=class Food extends Concerns.Catchable{constructor(){super();this.x=Math.floor(Math.random()*Game.width);this.y=Math.floor(Math.random()*Game.height);this.size=6;this.colour="rgba(0, 256, 256, 0.8)";Game.drawables.push(this);Game.updatables.push(this);Game.food.push(this);Game.snakes.forEach((function(snake){snake.see_new_food()}))}draw(){Game.canvas.draw_square(this)}update(){if(this.caught()){this.remove();this.caught_by().eat(this)}}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1);Game.drawables.splice(Game.drawables.indexOf(this),1);Game.food.splice(Game.food.indexOf(this),1);if(Game.config.famine==true){Game.config.food_interval+=Game.config.famine_step}}};if(typeof Static==="undefined"){Static={}}Static.Ghost=class Ghost{constructor(src){this.x=src.x;this.y=src.y;this.size=src.size;this.colour=Utils.change_alpha(src.colour,.1);Game.drawables.push(this)}draw(){Game.canvas.draw_circle(this)}};if(typeof Static==="undefined"){Static={}}Static.Text=class Text{constructor(text,x,y,size,align){this.text=text;this.size=size;this.x=x;this.y=y;this.align=align}draw(){Game.canvas.draw_text(this.text,this.x,this.y,"rgba(0,0,0,0.3)",this.align,this.size)}};if(typeof Creatures==="undefined"){Creatures={}}Creatures.Snake=class Snake extends(mix(Concerns.Follower,Concerns.TailBiter,Concerns.Eater)){constructor(behaviour){super();this.behaviour=new behaviour(this);if(typeof localStorage!="undefined"&&localStorage.getItem("snake")==behaviour.name){this.colour=Utils.change_alpha(this.behaviour.colour(),.6)}else{this.colour=this.behaviour.colour()}this.name=Game.register_snake(this.behaviour.name());this.stats=Stats.for_behaviour(this.behaviour);this.stats.add_snake(this);this.x=Math.random()*Game.width;this.y=Math.random()*Game.height;this.target={x:0,y:0};this.angle=this.angle_to_target();this.turn_speed=40;this.size=40;this.speed=20;this.angle=0;this.tail_segments=[];this.health=20;this.last_ate_tick=Game.tick;this.behaviour.set_target();this.history=this.init_history();this.grow_tail();this.grow_tail();Game.updatables.push(this);Game.drawables.push(this);Game.snakes.push(this)}score_point(){this.stats.score_points(1,this)}init_history(){return[{x:Math.sin(this.angle*Math.PI/180)*60+this.x,y:Math.cos(this.angle*Math.PI/180)*60+this.y}]}update(){this.move();this.bite_tail();for(var segment in this.tail_segments){this.tail_segments[segment].move()}if(Game.food.length==0){this.behaviour.idle()}else if(!Game.food.includes(this.target)&&!Game.snakes.includes(this.target)){this.behaviour.target_removed()}this.check_for_starvation();if(Game.tick>0&&Game.tick%1e3==0){this.score_point()}}draw(){Game.canvas.draw_circle(this);this.tail_segments.forEach((function(segment){segment.draw()}))}get_speed(){return this.speed}score(){return this.stats.scores[this.name]}get_bitten_by(biter){this.speed=20;if(this.health<=0){console.log(Game.tick+": "+this.name+" died because it's tail was bitten by "+biter.name);this.remove();biter.score_point()}}bite(snake){this.last_ate_tick=Game.tick;this.speed+=snake.speed/10;this.behaviour.bite_tail(snake);snake.behaviour.tail_bitten(this);if(snake!=this){this.score_point()}}remove(){Game.updatables.splice(Game.updatables.indexOf(this),1);Game.drawables.splice(Game.drawables.indexOf(this),1);Game.snakes.splice(Game.snakes.indexOf(this),1);new Static.Ghost(this);this.tail_segments.forEach((function(segment){new Static.Ghost(segment)}));this.stats.remove_snake(this)}grow_tail(){var target=this.tail_segments[this.tail_segments.length-1];if(target==null){target=this}this.tail_segments.push(new Creatures.TailSegment(target,this))}check_for_starvation(){if(Game.tick-this.last_ate_tick>Game.config.starvation_interval){if(this.tail_segments.length==0){console.log(Game.tick+": "+this.name+" died of starvation");this.remove()}else{this.last_ate_tick=Game.tick;this.tail_segments.pop();this.behaviour.starve()}}}};if(typeof Creatures==="undefined"){Creatures={}}Creatures.TailSegment=class TailSegment extends(mix(Concerns.Follower)){constructor(previous,head){super();this.head=head;if(previous.history[0]){this.x=previous.history[0].x;this.y=previous.history[0].y}else{this.x=previous.x;this.y=previous.y}this.size=30;this.speed=previous.speed;this.colour=head.colour;this.turn_speed=100;this.angle=previous.angle;this.target=previous;this.history=[];this.active=head.tail_segments.length>1}draw(){Game.canvas.draw_circle(this)}get_speed(){return this.head.speed}get_bitten(){this.head.health-=(this.head.tail_segments.length-this.head.tail_segments.indexOf(this))*2;this.head.tail_segments.splice(this.head.tail_segments.indexOf(this),this.head.tail_segments.length-1)}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.Failure=class Failure extends Behaviour{constructor(snake){super(snake);this.spot={x:Math.random()*this.game_width(),y:Math.random()*this.game_height()}}name(){return"<failfailfailfailfailfailfail>"}colour(){return"rgba(0,255,255,0.4)"}set_target(){this.target(this.spot)}idle(){this.target(this.spot)}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.Farthest=class Farthest extends Behaviour{constructor(snake){super(snake)}name(){return"Farthest Food"}colour(){return"rgba(0,255,0,0.4)"}set_target(){var behaviour=this;if(this.food().length==0){this.idle()}else{var distances=this.food().map((function(food){return behaviour.utils().distanceBetweenPoints(behaviour.snake,food)}));var max_distance=Math.max(...distances);this.target(this.food()[distances.indexOf(max_distance)])}}target_removed(){this.set_target()}eat_target(){this.set_target()}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.HighRotation=class HighRotation extends Behaviour{constructor(snake){super(snake)}name(){return"High Rotation"}colour(){return"rgba(128,0,128,0.4)"}set_target(){var behaviour=this;if(this.food().length==0){this.idle()}else{var angles=this.food().map((function(food){var angle=behaviour.utils().angleBetweenPoints(food,behaviour.snake);return Math.abs(behaviour.utils().angleDifference(angle,behaviour.angle()))}));var max_angle=Math.min(...angles);this.target(behaviour.food()[angles.indexOf(max_angle)])}}target_removed(){this.set_target()}eat(){this.set_target()}};Behaviours.Imported=class Imported extends Behaviour{constructor(snake){super(snake);this.spot={x:Math.random()*this.game_width(),y:Math.random()*this.game_height()}}name(){return"Imported"}colour(){return"rgba(0,255,255,0.4)"}set_target(){this.target(this.spot)}idle(){this.target(this.spot)}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.LowRotation=class LowRotation extends Behaviour{constructor(snake){super(snake)}name(){return"Low Rotation"}colour(){return"rgba(128,128,128,0.4)"}set_target(){var behaviour=this;if(this.food().length==0){this.idle()}else{var angles=this.food().map((function(food){var angle=behaviour.utils().angleBetweenPoints(food,behaviour.snake);return Math.abs(behaviour.utils().angleDifference(angle,behaviour.angle()))}));var min_angle=Math.max(...angles);this.target(behaviour.food()[angles.indexOf(min_angle)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.Nearest=class Nearest extends Behaviour{constructor(snake){super(snake)}name(){return"Nearest Food"}colour(){return"rgba(255,0,0,0.4)"}set_target(){var behaviour=this;if(this.food().length==0){this.idle()}else{var distances=this.food().map((function(food){return behaviour.utils().distanceBetweenPoints(behaviour.snake,food)}));var min_distance=Math.min(...distances);this.target(this.food()[distances.indexOf(min_distance)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.Parasite=class Parasite extends Behaviour{constructor(snake){super(snake)}name(){return"Parasite"}colour(){return"rgba(0,0,0,0.4)"}set_target(){var behaviour=this;if(this.snakes().length==0){this.idle()}else{var parasite=this.snake;var distances=this.snakes().map((function(snake){if(snake==parasite){return 99999}var length=snake.tail_segments.length;return Utils.distanceBetweenPoints(parasite,snake)-length*1e3}));var min_distance=Math.min(...distances);var target=this.snakes()[distances.indexOf(min_distance)];if(target==this.snake){this.target={x:this.game_width()/2,y:this.game_height()/2}}else{this.target(target)}}}every_tick(){this.set_target()}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.Random=class Random extends Behaviour{constructor(snake){super(snake)}name(){return"Random Food"}colour(){return"rgba(0,0,255,0.4)"}set_target(){if(this.food().length==0){this.idle()}else{this.target(this.food()[Math.floor(Math.random()*this.food().length)])}}target_removed(){this.set_target()}eat(){this.set_target()}};if(typeof Behaviours==="undefined"){Behaviours={}}Behaviours.TopHugger=class TopHugger extends Behaviour{constructor(snake){super(snake)}name(){return"Top Hugger"}colour(){return"rgba(255,128,0,0.4)"}set_target(){var behaviour=this;if(this.food().length==0){this.idle()}else{var heights=this.food().map((function(food){return food.y}));var min_height=Math.min(...heights);this.target(this.food()[heights.indexOf(min_height)])}}target_removed(){this.set_target()}eat(){this.set_target()}new_food(){this.set_target()}};Config={index:0,opponent_index:0,all_behaviours:function(){return Object.values(Behaviours)},single_behaviour:function(index){return[Object.values(Behaviours)[index]]},current_behaviour:function(){return Config.single_behaviour(Config.index)},current_opponent:function(){return Config.single_behaviour(Config.opponent_index)},current_pair:function(){return Config.current_behaviour().concat(Config.current_opponent())},next_behaviour:function(){var current=Config.current_behaviour();Config.index++;return current},next_opponent:function(){var current=Config.current_opponent();Config.opponent_index++;return current},finished:function(){return Config.index>=Object.keys(Behaviours).length},reset_indexes:function(){Config.index=0;Config.opponent_index=0},build_config:function(config){var new_config={};Object.keys(config).forEach((function(key){if(typeof config[key]=="function"){new_config[key]=config[key]()}else{new_config[key]=config[key]}}));switch(config.type){case"solo":if(new_config.snake){break}else{new_config.snake=Config.current_behaviour()[0].name;break}case"versus":if(new_config.snake){break}else{new_config.snake=Config.current_behaviour()[0].name;new_config.opponent=Config.current_opponent()[0].name}}return new_config},build_config_for_all:function(config){Config.reset_indexes();configs=[];while(!Config.finished()){configs.push(Config.build_config(config));Config.next_behaviour()}return configs},build_config_for_all_pairs:function(config){Config.reset_indexes();configs=[];while(!Config.finished()){Config.opponent_index=0;while(Config.opponent_index<Object.keys(Behaviours).length){configs.push(Config.build_config(config));Config.next_opponent()}Config.next_behaviour()}return configs},from_url:function(){if(typeof window!="undefined"){var url=window.location.href;var attrs={};url.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(m,key,value){attrs[key]=value}));if(attrs.snake){Config.index=Object.keys(Behaviours).indexOf(attrs.snake);if(Config.index==-1){throw"Unknown snake: "+attrs.snake}}if(attrs.opponent){Config.opponent_index=Object.keys(Behaviours).indexOf(attrs.opponent);if(Config.index==-1){throw"Unknown snake: "+attrs.snake}}var config=Configs[attrs.config];if(typeof config=="undefined"){throw"Unknown config: "+attrs.config}return Config.build_config(config)}}};if(typeof Configs==="undefined"){Configs={}}Configs.all_famine={id:"all_famine",type:"all",name:"Famine Mode - All snakes",title:"Famine Mode - All snakes",min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:true,famine_step:5,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:1,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.big={id:"big",type:"all",name:"Big Swarm Mode - All snakes",title:"Big Swarm Mode - All snakes",min_snakes:0,starting_food_mode:"rng",starting_food:200,grid_size:100,food_interval:5,famine:false,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:10,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.grid={id:"grid",type:"solo",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);return"Solo on Grid: "+dummy_behaviour.name()},title:"Solo on Grid",min_snakes:0,starting_food_mode:"grid",starting_food:20,grid_size:100,food_interval:5e7,famine:false,starting_behaviours:Config.current_behaviour,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_behaviour,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.one_vs_five={id:"one_vs_five",type:"versus",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);var dummy_opponent=new(Config.current_opponent()[0]);return"1 "+dummy_behaviour.name()+" Vs. 5 x "+dummy_opponent.name()},title:"One Vs. Five",min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:false,starting_behaviours:function(){var pair=Config.current_pair();return[pair[0],pair[1],pair[1],pair[1],pair[1],pair[1]]},snakes_of_each_behaviour:1,respawn_behaviours:Config.current_pair,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.royale={id:"royale",type:"all",name:"Battle Royale - All snakes",title:"Battle Royale - All snakes",min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:false,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:1,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.solo_famine={id:"solo_famine",type:"solo",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);return"Famine Mode: "+dummy_behaviour.name()},title:"Famine Mode",min_snakes:0,starting_food_mode:"rng",starting_food:10,grid_size:100,food_interval:50,famine:true,famine_step:30,starting_behaviours:Config.current_behaviour,snakes_of_each_behaviour:1,respawn_behaviours:Config.all_behaviours,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.swarm={id:"swarm",type:"solo",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);return"Swarm Mode: 20 x "+dummy_behaviour.name()},title:"Swarm Mode",min_snakes:0,starting_food_mode:"rng",starting_food:200,grid_size:100,food_interval:5,famine:false,starting_behaviours:Config.current_behaviour,snakes_of_each_behaviour:20,respawn_behaviours:Config.current_behaviour,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.duel={id:"duel",type:"versus",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);var dummy_opponent=new(Config.current_opponent()[0]);return"Duel: "+dummy_behaviour.name()+"  Vs. "+dummy_opponent.name()},title:"Duel",min_snakes:0,starting_food_mode:"rng",starting_food:20,grid_size:100,food_interval:50,famine:false,starting_behaviours:Config.current_pair,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_pair,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.vs_famine={id:"vs_famine",type:"versus",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);var dummy_opponent=new(Config.current_opponent()[0]);return"Famine Mode: "+dummy_behaviour.name()+"  Vs. "+dummy_opponent.name()},title:"Famine Mode",min_snakes:0,starting_food_mode:"rng",starting_food:10,grid_size:100,food_interval:50,famine:true,famine_step:10,starting_behaviours:Config.current_pair,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_pair,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.vs_grid={id:"vs_grid",type:"versus",name:function(){var dummy_behaviour=new(Config.current_behaviour()[0]);var dummy_opponent=new(Config.current_opponent()[0]);return"Grid Mode: "+dummy_behaviour.name()+"  Vs. "+dummy_opponent.name()},title:"Grid mode",min_snakes:0,starting_food_mode:"grid",starting_food:20,grid_size:100,food_interval:5e11,famine:false,starting_behaviours:Config.current_pair,snakes_of_each_behaviour:1,respawn_behaviours:Config.current_pair,min_starting_snakes:0,starvation_interval:500};if(typeof Configs==="undefined"){Configs={}}Configs.watch={id:"royale",type:"all",name:"",title:"Watch",min_snakes:3,starting_food_mode:"rng",starting_food:30,grid_size:100,food_interval:50,famine:false,starting_behaviours:Config.all_behaviours,snakes_of_each_behaviour:1,respawn_behaviours:Config.all_behaviours,min_starting_snakes:20,starvation_interval:500};module.exports = {Game: Game, Config: Config, Configs: Configs, Behaviours: Behaviours, Behaviour: Behaviour};
